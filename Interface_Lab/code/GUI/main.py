import random
import sys
import re

import matplotlib.pyplot as plt
import serial
from matplotlib.backends.backend_qt5agg import \
    FigureCanvasQTAgg as FigureCanvas
from matplotlib.figure import Figure
from PyQt5 import QtWidgets, QtCore

from Ui_ADT7420 import Ui_MplMainWindow


class App(QtWidgets.QWidget, Ui_MplMainWindow):

    def __init__(self, parent=None):
        # initialization of the superclass
        super(App, self).__init__()
        # setup the GUI --> function generated by pyuic4
        self.setupUi(self)
        # connect the signals with the slots
        self.timer = QtCore.QTimer()
        self.timer.timeout.connect(self.read_data)

        self.serial = serial.Serial('COM8', 115200, timeout=1)
        if False == self.serial.isOpen():
            print("faild to open serial port!\n")
        else:
            self.timer.start(1000)

        self.th = 36
        self.data = [0] * 16
        self.mplfigure.canvas.ax.clear()
        self.mplfigure.canvas.ax.plot(self.data, '*-')
        self.lhor = self.mplfigure.canvas.ax.axhline(self.th, color='r')
        self.mplfigure.canvas.draw()



    def read_data(self):
        try:
            text = self.serial.read_all()
            print(text)
            #self.textEdit_log.clear()
            self.textEdit_log.insertPlainText(text.decode())
            self.textEdit_log.verticalScrollBar().setValue(self.textEdit_log.verticalScrollBar().maximum());

            # read and draw temp
            temp = re.findall(r"T = (?P<temp>[0-9]*\.00)", text.decode())
            for t in temp:
                del self.data[0]
                self.data.append(float(t)/16)
                self.temp_cur.setText(str(float(t)/16)+'℃')
            self.mplfigure.canvas.ax.clear()
            self.lhor = self.mplfigure.canvas.ax.axhline(self.th, color='r')
            self.mplfigure.canvas.ax.plot(self.data, '*-')
            self.mplfigure.canvas.draw()

            # read and draw tar_temp
            tar_temp = re.findall(r"l=([0-9]*)e", text.decode())
            for t in tar_temp:
                print(type(t))
                self.th = int(t)
                self.lhor.set_ydata(self.th)
                self.temp_target.setText(str(t)+'℃')

            # read and write level
            fan_level = re.findall(r"f=([0-9]*)e", text.decode())
            for f in fan_level:
                self.fan_level.setText(str(f))
                self.door_num.setText(str(8-int(f)))
        except:
            pass



    def setTemp(self):
        self.textEdit_log.insertPlainText('Setting Target Temp: ' + str(self.spinBox_tth.value()) + '℃\n')
        self.th = self.spinBox_tth.value()
        self.lhor.set_ydata(self.th)
        self.mplfigure.canvas.draw()

        val = "%x" % self.spinBox_tth.value()
        # self.serial.write('f'.encode())
        # self.serial.write(val.encode())

    def DisplaySettings(self):
        self.serial.write('s'.encode())


if __name__ == '__main__':
    app = QtWidgets.QApplication(sys.argv)
    ex = App()
    ex.show()
    sys.exit(app.exec_())
