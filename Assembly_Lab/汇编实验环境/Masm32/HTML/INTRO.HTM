<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
   <meta name="Author" content="hutch">
   <meta name="GENERATOR" content="Mozilla/4.7 [en] (Win95; I) [Netscape]">
   <title>Introduction</title>
</head>
<body text="#CCCCCC" bgcolor="#000000" link="#66FF99" vlink="#66FF99" alink="#FF0000">

<center><b><i><font color="#3366FF"><font size=+4>Introduction</font></font></i></b></center>
<b>&nbsp;</b>
<br><b>Many remember assembler as a complex and tedious necessity when
a high level language failed to deliver in terms of capacity or performance
yet it has always been capable of writing full size applications in elegant
and efficient ways. MASM has the capacity to write proper modular code
which becomes a necessity as a project becomes larger.</b><b></b>
<p><b>Assembler has the freedom to write code ranging from the self imposed
structural approach to unrestrained freestyle code, each having their respective
advantages. Self imposed modular coding has the advantage of organisation,
particularly with larger projects where freestyle has its advantages in
close range loop optimisation code.</b><b></b>
<p><b>Performance to size ratio assembler code uses both approaches which
takes advantage of many of the higher level language's efficiency techniques
such as code reuse while being able to specifically target speed critical
code where it is necessary.</b><b></b>
<p><b>32 bit assembler is both clearer and simpler than the DOS and 16
bit Windows code and is not cursed with the complexity of segment arithmetic.
You no longer have to deal with AX:DX pairs for long integers and there
is no 64k boundary imposed by the segmented structure of 16 bit software.</b><b></b>
<p><b>The complexity of writing 32 bit Windows software is related to the
structure of Windows and the sheer range of functions in the API set. It
differs from DOS code only in so far as the parameters are passed on the
stack rather than in registers as in the DOS interrupts.</b><b></b>
<p><b>While the sheer range of functions in Window can be a bit intimidating,
it also puts in the hands of the assembler language programmer, a massive
set of capacities that were never available in DOS.</b><b></b>
<p><b>One of the advantages of writing in assembler is that it comfortably
handles the "C" format of the Windows APIs with no difficulty. Zero terminated
strings, structures, pointers, data sizes etc... are all part of writing
assembler.</b>
</body>
</html>
